// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{})
	userInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheQuoraUserInfoIdPrefix   = "cache:quora:userInfo:id:"
	cacheQuoraUserInfoNamePrefix = "cache:quora:userInfo:name:"
	cacheQuoraUserInfoUidPrefix  = "cache:quora:userInfo:uid:"
)

type (
	userInfoModel interface {
		Insert(ctx context.Context, data *UserInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserInfo, error)
		FindOneByName(ctx context.Context, name string) (*UserInfo, error)
		FindOneByUid(ctx context.Context, uid int64) (*UserInfo, error)
		Update(ctx context.Context, data *UserInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserInfoModel struct {
		sqlc.CachedConn
		table string
	}

	UserInfo struct {
		Id        int64     `db:"id"`
		Uid       int64     `db:"uid"`
		Avatar    string    `db:"avatar"`
		Name      string    `db:"name"`
		Agreed    int64     `db:"agreed"`
		Liked     int64     `db:"liked"`
		Collected int64     `db:"collected"`
		Gender    int64     `db:"gender"`
		Follower  int64     `db:"follower"`
		Following int64     `db:"following"`
		CreateAt  time.Time `db:"create_at"`
	}
)

func newUserInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserInfoModel {
	return &defaultUserInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_info`",
	}
}

func (m *defaultUserInfoModel) Insert(ctx context.Context, data *UserInfo) (sql.Result, error) {
	quoraUserInfoIdKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoIdPrefix, data.Id)
	quoraUserInfoNameKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoNamePrefix, data.Name)
	quoraUserInfoUidKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoUidPrefix, data.Uid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Avatar, data.Name, data.Agreed, data.Liked, data.Collected, data.Gender, data.Follower, data.Following, data.CreateAt)
	}, quoraUserInfoIdKey, quoraUserInfoNameKey, quoraUserInfoUidKey)
	return ret, err
}

func (m *defaultUserInfoModel) FindOne(ctx context.Context, id int64) (*UserInfo, error) {
	quoraUserInfoIdKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoIdPrefix, id)
	var resp UserInfo
	err := m.QueryRowCtx(ctx, &resp, quoraUserInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) FindOneByName(ctx context.Context, name string) (*UserInfo, error) {
	quoraUserInfoNameKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoNamePrefix, name)
	var resp UserInfo
	err := m.QueryRowIndexCtx(ctx, &resp, quoraUserInfoNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", userInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) FindOneByUid(ctx context.Context, uid int64) (*UserInfo, error) {
	quoraUserInfoUidKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoUidPrefix, uid)
	var resp UserInfo
	err := m.QueryRowIndexCtx(ctx, &resp, quoraUserInfoUidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? limit 1", userInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) Update(ctx context.Context, data *UserInfo) error {
	quoraUserInfoIdKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoIdPrefix, data.Id)
	quoraUserInfoNameKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoNamePrefix, data.Name)
	quoraUserInfoUidKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoUidPrefix, data.Uid)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Avatar, data.Name, data.Agreed, data.Liked, data.Collected, data.Gender, data.Follower, data.Following, data.CreateAt, data.Id)
	}, quoraUserInfoIdKey, quoraUserInfoNameKey, quoraUserInfoUidKey)
	return err
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	quoraUserInfoIdKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoIdPrefix, id)
	quoraUserInfoNameKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoNamePrefix, data.Name)
	quoraUserInfoUidKey := fmt.Sprintf("%s%v", cacheQuoraUserInfoUidPrefix, data.Uid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, quoraUserInfoIdKey, quoraUserInfoNameKey, quoraUserInfoUidKey)
	return err
}

func (m *defaultUserInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheQuoraUserInfoIdPrefix, primary)
}

func (m *defaultUserInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserInfoModel) tableName() string {
	return m.table
}
