// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`Id`", "`create_time`", "`update_time`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`Id`", "`create_time`", "`update_time`"), "=?,") + "=?"
	cacheCommentQidPrefix      = "cach:quora:comment:qid"
	cacheQuoraCommentIdPrefix  = "cache:quora:comment:id:"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comment, error)
		FindByPid(ctx context.Context, page, pageSize int64, orderBy string, pid int64) ([]*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCommentModel struct {
		sqlc.CachedConn
		table string
	}

	Comment struct {
		Id                int64     `db:"Id"`
		ResourceType      string    `db:"resource_type"`
		Uid               int64     `db:"uid"`
		Content           string    `db:"content"`
		Likes             int64     `db:"likes"`
		ChildCommentNuber int64     `db:"child_comment_nuber"`
		CreateAt          time.Time `db:"create_at"`
		Ip                string    `db:"ip"`
		Pid               int64     `db:"pid"`
	}
)

func newCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`comment`",
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	quoraCommentIdKey := fmt.Sprintf("%s%v", cacheQuoraCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, commentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ResourceType, data.Uid, data.Content, data.Likes, data.ChildCommentNuber, data.CreateAt, data.Ip, data.Pid)
	}, quoraCommentIdKey)
	return ret, err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, id int64) (*Comment, error) {
	quoraCommentIdKey := fmt.Sprintf("%s%v", cacheQuoraCommentIdPrefix, id)
	var resp Comment
	err := m.QueryRowCtx(ctx, &resp, quoraCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", commentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindByPid(ctx context.Context, page, pageSize int64, orderBy string, qid int64) ([]*Comment, error) {
	quoraAnswerIdKey := fmt.Sprintf("%s%v", cacheCommentQidPrefix, qid)

	if orderBy == "" {
		orderBy = "likes DESC"
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	var resp []*Comment
	err := m.QueryRowCtx(ctx, &resp, quoraAnswerIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `pid` = ? ORDER BY ? limit ? OFFSET ?", commentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, qid, orderBy, pageSize, offset)
	})
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Update(ctx context.Context, data *Comment) error {
	quoraCommentIdKey := fmt.Sprintf("%s%v", cacheQuoraCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `Id` = ?", m.table, commentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ResourceType, data.Uid, data.Content, data.Likes, data.ChildCommentNuber, data.CreateAt, data.Ip, data.Pid, data.Id)
	}, quoraCommentIdKey)
	return err
}

func (m *defaultCommentModel) Delete(ctx context.Context, id int64) error {
	quoraCommentIdKey := fmt.Sprintf("%s%v", cacheQuoraCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `Id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, quoraCommentIdKey)
	return err
}

func (m *defaultCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheQuoraCommentIdPrefix, primary)
}

func (m *defaultCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `Id` = ? limit 1", commentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}
