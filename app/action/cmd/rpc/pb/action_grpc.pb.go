// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: action.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionClient is the client API for Action service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionClient interface {
	AddAgree(ctx context.Context, in *AgreeReq, opts ...grpc.CallOption) (*AgreeResp, error)
	DisAgree(ctx context.Context, in *AgreeReq, opts ...grpc.CallOption) (*AgreeResp, error)
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error)
	Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeResp, error)
	Collection(ctx context.Context, in *CollectionReq, opts ...grpc.CallOption) (*CollectionResp, error)
}

type actionClient struct {
	cc grpc.ClientConnInterface
}

func NewActionClient(cc grpc.ClientConnInterface) ActionClient {
	return &actionClient{cc}
}

func (c *actionClient) AddAgree(ctx context.Context, in *AgreeReq, opts ...grpc.CallOption) (*AgreeResp, error) {
	out := new(AgreeResp)
	err := c.cc.Invoke(ctx, "/pb.action/AddAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionClient) DisAgree(ctx context.Context, in *AgreeReq, opts ...grpc.CallOption) (*AgreeResp, error) {
	out := new(AgreeResp)
	err := c.cc.Invoke(ctx, "/pb.action/DisAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowResp, error) {
	out := new(FollowResp)
	err := c.cc.Invoke(ctx, "/pb.action/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionClient) Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeResp, error) {
	out := new(LikeResp)
	err := c.cc.Invoke(ctx, "/pb.action/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionClient) Collection(ctx context.Context, in *CollectionReq, opts ...grpc.CallOption) (*CollectionResp, error) {
	out := new(CollectionResp)
	err := c.cc.Invoke(ctx, "/pb.action/Collection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServer is the server API for Action service.
// All implementations must embed UnimplementedActionServer
// for forward compatibility
type ActionServer interface {
	AddAgree(context.Context, *AgreeReq) (*AgreeResp, error)
	DisAgree(context.Context, *AgreeReq) (*AgreeResp, error)
	Follow(context.Context, *FollowReq) (*FollowResp, error)
	Like(context.Context, *LikeReq) (*LikeResp, error)
	Collection(context.Context, *CollectionReq) (*CollectionResp, error)
	mustEmbedUnimplementedActionServer()
}

// UnimplementedActionServer must be embedded to have forward compatible implementations.
type UnimplementedActionServer struct {
}

func (UnimplementedActionServer) AddAgree(context.Context, *AgreeReq) (*AgreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgree not implemented")
}
func (UnimplementedActionServer) DisAgree(context.Context, *AgreeReq) (*AgreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisAgree not implemented")
}
func (UnimplementedActionServer) Follow(context.Context, *FollowReq) (*FollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedActionServer) Like(context.Context, *LikeReq) (*LikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedActionServer) Collection(context.Context, *CollectionReq) (*CollectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collection not implemented")
}
func (UnimplementedActionServer) mustEmbedUnimplementedActionServer() {}

// UnsafeActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServer will
// result in compilation errors.
type UnsafeActionServer interface {
	mustEmbedUnimplementedActionServer()
}

func RegisterActionServer(s grpc.ServiceRegistrar, srv ActionServer) {
	s.RegisterService(&Action_ServiceDesc, srv)
}

func _Action_AddAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).AddAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.action/AddAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).AddAgree(ctx, req.(*AgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Action_DisAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).DisAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.action/DisAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).DisAgree(ctx, req.(*AgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Action_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.action/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Action_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.action/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).Like(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Action_Collection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).Collection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.action/Collection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).Collection(ctx, req.(*CollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Action_ServiceDesc is the grpc.ServiceDesc for Action service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Action_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.action",
	HandlerType: (*ActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAgree",
			Handler:    _Action_AddAgree_Handler,
		},
		{
			MethodName: "DisAgree",
			Handler:    _Action_DisAgree_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Action_Follow_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _Action_Like_Handler,
		},
		{
			MethodName: "Collection",
			Handler:    _Action_Collection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "action.proto",
}
