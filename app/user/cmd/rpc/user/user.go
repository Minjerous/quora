// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"quora/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenReq    = pb.GenerateTokenReq
	GenerateTokenResp   = pb.GenerateTokenResp
	GetUserInfoReq      = pb.GetUserInfoReq
	GetUserInfoResp     = pb.GetUserInfoResp
	LoginReq            = pb.LoginReq
	LoginResp           = pb.LoginResp
	OAuthLoginReq       = pb.OAuthLoginReq
	OAuthLoginResp      = pb.OAuthLoginResp
	RegisterReq         = pb.RegisterReq
	RegisterResp        = pb.RegisterResp
	SendEmailReq        = pb.SendEmailReq
	SendEmailResp       = pb.SendEmailResp
	UserInfo            = pb.UserInfo
	VerifyEmailCodeReq  = pb.VerifyEmailCodeReq
	VerifyEmailCodeResp = pb.VerifyEmailCodeResp

	User interface {
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		OauthLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*OAuthLoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		VerifyEmailCode(ctx context.Context, in *VerifyEmailCodeReq, opts ...grpc.CallOption) (*VerifyEmailCodeResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*SendEmailResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) OauthLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*OAuthLoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.OauthLogin(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) VerifyEmailCode(ctx context.Context, in *VerifyEmailCodeReq, opts ...grpc.CallOption) (*VerifyEmailCodeResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.VerifyEmailCode(ctx, in, opts...)
}

func (m *defaultUser) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUser) SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*SendEmailResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SendEmail(ctx, in, opts...)
}
