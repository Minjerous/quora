// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userBasicFieldNames          = builder.RawFieldNames(&UserBasic{})
	userBasicRows                = strings.Join(userBasicFieldNames, ",")
	userBasicRowsExpectAutoSet   = strings.Join(stringx.Remove(userBasicFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userBasicRowsWithPlaceHolder = strings.Join(stringx.Remove(userBasicFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheQuoraUserBasicIdPrefix    = "cache:quora:userBasic:id:"
	cacheQuoraUserBasicEmailPrefix = "cache:quora:userBasic:email:"
	cacheQuoraUserBasicNamePrefix  = "cache:quora:userBasic:name:"
)

type (
	userBasicModel interface {
		Insert(ctx context.Context, data *UserBasic) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserBasic, error)
		FindOneByEmail(ctx context.Context, email string) (*UserBasic, error)
		FindOneByName(ctx context.Context, name string) (*UserBasic, error)
		Update(ctx context.Context, data *UserBasic) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserBasicModel struct {
		sqlc.CachedConn
		table string
	}

	UserBasic struct {
		Id        int64     `db:"id"`
		Name      string    `db:"name"`
		Password  string    `db:"password"`
		Email     string    `db:"email"`
		Gender    int64     `db:"gender"`
		Agreed    int64     `db:"agreed"`
		Liked     int64     `db:"liked"`
		Collected int64     `db:"collected"`
		Follower  int64     `db:"follower"`
		Following int64     `db:"following"`
		CreatedAt time.Time `db:"created_at"`
		Salt      string    `db:"salt"`
		Avatar    string    `db:"avatar"`
	}
)

func newUserBasicModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserBasicModel {
	return &defaultUserBasicModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_basic`",
	}
}

func (m *defaultUserBasicModel) Insert(ctx context.Context, data *UserBasic) (sql.Result, error) {
	quoraUserBasicEmailKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicEmailPrefix, data.Email)
	quoraUserBasicIdKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicIdPrefix, data.Id)
	quoraUserBasicNameKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userBasicRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Password, data.Email, data.Gender, data.Agreed, data.Liked, data.Collected, data.Follower, data.Following, data.CreatedAt, data.Salt, data.Avatar)
	}, quoraUserBasicEmailKey, quoraUserBasicIdKey, quoraUserBasicNameKey)
	return ret, err
}

func (m *defaultUserBasicModel) FindOne(ctx context.Context, id int64) (*UserBasic, error) {
	quoraUserBasicIdKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicIdPrefix, id)
	var resp UserBasic
	err := m.QueryRowCtx(ctx, &resp, quoraUserBasicIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userBasicRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) FindOneByEmail(ctx context.Context, email string) (*UserBasic, error) {
	quoraUserBasicEmailKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicEmailPrefix, email)
	var resp UserBasic
	err := m.QueryRowIndexCtx(ctx, &resp, quoraUserBasicEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userBasicRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) FindOneByName(ctx context.Context, name string) (*UserBasic, error) {
	quoraUserBasicNameKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicNamePrefix, name)
	var resp UserBasic
	err := m.QueryRowIndexCtx(ctx, &resp, quoraUserBasicNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", userBasicRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBasicModel) Update(ctx context.Context, data *UserBasic) error {
	quoraUserBasicEmailKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicEmailPrefix, data.Email)
	quoraUserBasicIdKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicIdPrefix, data.Id)
	quoraUserBasicNameKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicNamePrefix, data.Name)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userBasicRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Password, data.Email, data.Gender, data.Agreed, data.Liked, data.Collected, data.Follower, data.Following, data.CreatedAt, data.Salt, data.Avatar, data.Id)
	}, quoraUserBasicEmailKey, quoraUserBasicIdKey, quoraUserBasicNameKey)
	return err
}

func (m *defaultUserBasicModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	quoraUserBasicEmailKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicEmailPrefix, data.Email)
	quoraUserBasicIdKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicIdPrefix, id)
	quoraUserBasicNameKey := fmt.Sprintf("%s%v", cacheQuoraUserBasicNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, quoraUserBasicEmailKey, quoraUserBasicIdKey, quoraUserBasicNameKey)
	return err
}

func (m *defaultUserBasicModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheQuoraUserBasicIdPrefix, primary)
}

func (m *defaultUserBasicModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userBasicRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserBasicModel) tableName() string {
	return m.table
}
