// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: qa.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QaClient is the client API for Qa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QaClient interface {
	//-----------------------answer-----------------------
	AddAnswer(ctx context.Context, in *AddAnswerReq, opts ...grpc.CallOption) (*AddAnswerResp, error)
	UpdateAnswer(ctx context.Context, in *UpdateAnswerReq, opts ...grpc.CallOption) (*UpdateAnswerResp, error)
	DelAnswer(ctx context.Context, in *DelAnswerReq, opts ...grpc.CallOption) (*DelAnswerResp, error)
	GetAnswerById(ctx context.Context, in *GetAnswerByIdReq, opts ...grpc.CallOption) (*GetAnswerByIdResp, error)
	SearchAnswer(ctx context.Context, in *SearchAnswerReq, opts ...grpc.CallOption) (*SearchAnswerResp, error)
	GetAnswerListByQid(ctx context.Context, in *GetAnswerListByPidReq, opts ...grpc.CallOption) (*GetAnswerListByPidResp, error)
	GetAnswerListByUid(ctx context.Context, in *GetAnswerListByUidReq, opts ...grpc.CallOption) (*GetAnswerListByUidResp, error)
	//-----------------------question-----------------------
	AddQuestion(ctx context.Context, in *AddQuestionReq, opts ...grpc.CallOption) (*AddQuestionResp, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error)
	DelQuestion(ctx context.Context, in *DelQuestionReq, opts ...grpc.CallOption) (*DelQuestionResp, error)
	GetQuestionById(ctx context.Context, in *GetQuestionByIdReq, opts ...grpc.CallOption) (*GetQuestionByIdResp, error)
	SearchQuestion(ctx context.Context, in *SearchQuestionReq, opts ...grpc.CallOption) (*SearchQuestionResp, error)
}

type qaClient struct {
	cc grpc.ClientConnInterface
}

func NewQaClient(cc grpc.ClientConnInterface) QaClient {
	return &qaClient{cc}
}

func (c *qaClient) AddAnswer(ctx context.Context, in *AddAnswerReq, opts ...grpc.CallOption) (*AddAnswerResp, error) {
	out := new(AddAnswerResp)
	err := c.cc.Invoke(ctx, "/pb.qa/AddAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) UpdateAnswer(ctx context.Context, in *UpdateAnswerReq, opts ...grpc.CallOption) (*UpdateAnswerResp, error) {
	out := new(UpdateAnswerResp)
	err := c.cc.Invoke(ctx, "/pb.qa/UpdateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) DelAnswer(ctx context.Context, in *DelAnswerReq, opts ...grpc.CallOption) (*DelAnswerResp, error) {
	out := new(DelAnswerResp)
	err := c.cc.Invoke(ctx, "/pb.qa/DelAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) GetAnswerById(ctx context.Context, in *GetAnswerByIdReq, opts ...grpc.CallOption) (*GetAnswerByIdResp, error) {
	out := new(GetAnswerByIdResp)
	err := c.cc.Invoke(ctx, "/pb.qa/GetAnswerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) SearchAnswer(ctx context.Context, in *SearchAnswerReq, opts ...grpc.CallOption) (*SearchAnswerResp, error) {
	out := new(SearchAnswerResp)
	err := c.cc.Invoke(ctx, "/pb.qa/SearchAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) GetAnswerListByQid(ctx context.Context, in *GetAnswerListByPidReq, opts ...grpc.CallOption) (*GetAnswerListByPidResp, error) {
	out := new(GetAnswerListByPidResp)
	err := c.cc.Invoke(ctx, "/pb.qa/GetAnswerListByQid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) GetAnswerListByUid(ctx context.Context, in *GetAnswerListByUidReq, opts ...grpc.CallOption) (*GetAnswerListByUidResp, error) {
	out := new(GetAnswerListByUidResp)
	err := c.cc.Invoke(ctx, "/pb.qa/GetAnswerListByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) AddQuestion(ctx context.Context, in *AddQuestionReq, opts ...grpc.CallOption) (*AddQuestionResp, error) {
	out := new(AddQuestionResp)
	err := c.cc.Invoke(ctx, "/pb.qa/AddQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error) {
	out := new(UpdateQuestionResp)
	err := c.cc.Invoke(ctx, "/pb.qa/UpdateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) DelQuestion(ctx context.Context, in *DelQuestionReq, opts ...grpc.CallOption) (*DelQuestionResp, error) {
	out := new(DelQuestionResp)
	err := c.cc.Invoke(ctx, "/pb.qa/DelQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) GetQuestionById(ctx context.Context, in *GetQuestionByIdReq, opts ...grpc.CallOption) (*GetQuestionByIdResp, error) {
	out := new(GetQuestionByIdResp)
	err := c.cc.Invoke(ctx, "/pb.qa/GetQuestionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qaClient) SearchQuestion(ctx context.Context, in *SearchQuestionReq, opts ...grpc.CallOption) (*SearchQuestionResp, error) {
	out := new(SearchQuestionResp)
	err := c.cc.Invoke(ctx, "/pb.qa/SearchQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QaServer is the server API for Qa service.
// All implementations must embed UnimplementedQaServer
// for forward compatibility
type QaServer interface {
	//-----------------------answer-----------------------
	AddAnswer(context.Context, *AddAnswerReq) (*AddAnswerResp, error)
	UpdateAnswer(context.Context, *UpdateAnswerReq) (*UpdateAnswerResp, error)
	DelAnswer(context.Context, *DelAnswerReq) (*DelAnswerResp, error)
	GetAnswerById(context.Context, *GetAnswerByIdReq) (*GetAnswerByIdResp, error)
	SearchAnswer(context.Context, *SearchAnswerReq) (*SearchAnswerResp, error)
	GetAnswerListByQid(context.Context, *GetAnswerListByPidReq) (*GetAnswerListByPidResp, error)
	GetAnswerListByUid(context.Context, *GetAnswerListByUidReq) (*GetAnswerListByUidResp, error)
	//-----------------------question-----------------------
	AddQuestion(context.Context, *AddQuestionReq) (*AddQuestionResp, error)
	UpdateQuestion(context.Context, *UpdateQuestionReq) (*UpdateQuestionResp, error)
	DelQuestion(context.Context, *DelQuestionReq) (*DelQuestionResp, error)
	GetQuestionById(context.Context, *GetQuestionByIdReq) (*GetQuestionByIdResp, error)
	SearchQuestion(context.Context, *SearchQuestionReq) (*SearchQuestionResp, error)
	mustEmbedUnimplementedQaServer()
}

// UnimplementedQaServer must be embedded to have forward compatible implementations.
type UnimplementedQaServer struct {
}

func (UnimplementedQaServer) AddAnswer(context.Context, *AddAnswerReq) (*AddAnswerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswer not implemented")
}
func (UnimplementedQaServer) UpdateAnswer(context.Context, *UpdateAnswerReq) (*UpdateAnswerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnswer not implemented")
}
func (UnimplementedQaServer) DelAnswer(context.Context, *DelAnswerReq) (*DelAnswerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAnswer not implemented")
}
func (UnimplementedQaServer) GetAnswerById(context.Context, *GetAnswerByIdReq) (*GetAnswerByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswerById not implemented")
}
func (UnimplementedQaServer) SearchAnswer(context.Context, *SearchAnswerReq) (*SearchAnswerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAnswer not implemented")
}
func (UnimplementedQaServer) GetAnswerListByQid(context.Context, *GetAnswerListByPidReq) (*GetAnswerListByPidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswerListByQid not implemented")
}
func (UnimplementedQaServer) GetAnswerListByUid(context.Context, *GetAnswerListByUidReq) (*GetAnswerListByUidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswerListByUid not implemented")
}
func (UnimplementedQaServer) AddQuestion(context.Context, *AddQuestionReq) (*AddQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestion not implemented")
}
func (UnimplementedQaServer) UpdateQuestion(context.Context, *UpdateQuestionReq) (*UpdateQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQaServer) DelQuestion(context.Context, *DelQuestionReq) (*DelQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelQuestion not implemented")
}
func (UnimplementedQaServer) GetQuestionById(context.Context, *GetQuestionByIdReq) (*GetQuestionByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionById not implemented")
}
func (UnimplementedQaServer) SearchQuestion(context.Context, *SearchQuestionReq) (*SearchQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQuestion not implemented")
}
func (UnimplementedQaServer) mustEmbedUnimplementedQaServer() {}

// UnsafeQaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QaServer will
// result in compilation errors.
type UnsafeQaServer interface {
	mustEmbedUnimplementedQaServer()
}

func RegisterQaServer(s grpc.ServiceRegistrar, srv QaServer) {
	s.RegisterService(&Qa_ServiceDesc, srv)
}

func _Qa_AddAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).AddAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/AddAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).AddAnswer(ctx, req.(*AddAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_UpdateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).UpdateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/UpdateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).UpdateAnswer(ctx, req.(*UpdateAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_DelAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).DelAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/DelAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).DelAnswer(ctx, req.(*DelAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_GetAnswerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).GetAnswerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/GetAnswerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).GetAnswerById(ctx, req.(*GetAnswerByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_SearchAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).SearchAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/SearchAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).SearchAnswer(ctx, req.(*SearchAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_GetAnswerListByQid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerListByPidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).GetAnswerListByQid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/GetAnswerListByQid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).GetAnswerListByQid(ctx, req.(*GetAnswerListByPidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_GetAnswerListByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerListByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).GetAnswerListByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/GetAnswerListByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).GetAnswerListByUid(ctx, req.(*GetAnswerListByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_AddQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).AddQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/AddQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).AddQuestion(ctx, req.(*AddQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).UpdateQuestion(ctx, req.(*UpdateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_DelQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).DelQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/DelQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).DelQuestion(ctx, req.(*DelQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_GetQuestionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).GetQuestionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/GetQuestionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).GetQuestionById(ctx, req.(*GetQuestionByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qa_SearchQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QaServer).SearchQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.qa/SearchQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QaServer).SearchQuestion(ctx, req.(*SearchQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Qa_ServiceDesc is the grpc.ServiceDesc for Qa service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qa_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.qa",
	HandlerType: (*QaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAnswer",
			Handler:    _Qa_AddAnswer_Handler,
		},
		{
			MethodName: "UpdateAnswer",
			Handler:    _Qa_UpdateAnswer_Handler,
		},
		{
			MethodName: "DelAnswer",
			Handler:    _Qa_DelAnswer_Handler,
		},
		{
			MethodName: "GetAnswerById",
			Handler:    _Qa_GetAnswerById_Handler,
		},
		{
			MethodName: "SearchAnswer",
			Handler:    _Qa_SearchAnswer_Handler,
		},
		{
			MethodName: "GetAnswerListByQid",
			Handler:    _Qa_GetAnswerListByQid_Handler,
		},
		{
			MethodName: "GetAnswerListByUid",
			Handler:    _Qa_GetAnswerListByUid_Handler,
		},
		{
			MethodName: "AddQuestion",
			Handler:    _Qa_AddQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _Qa_UpdateQuestion_Handler,
		},
		{
			MethodName: "DelQuestion",
			Handler:    _Qa_DelQuestion_Handler,
		},
		{
			MethodName: "GetQuestionById",
			Handler:    _Qa_GetQuestionById_Handler,
		},
		{
			MethodName: "SearchQuestion",
			Handler:    _Qa_SearchQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qa.proto",
}
