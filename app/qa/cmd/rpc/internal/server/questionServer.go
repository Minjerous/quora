// Code generated by goctl. DO NOT EDIT!
// Source: qa.proto

package server

import (
	"context"

	"quora/app/qa/cmd/rpc/internal/logic"
	"quora/app/qa/cmd/rpc/internal/svc"
	"quora/app/qa/cmd/rpc/pb"
)

type QuestionServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedQaServer
}

func NewQuestionServer(svcCtx *svc.ServiceContext) *QuestionServer {
	return &QuestionServer{
		svcCtx: svcCtx,
	}
}

func (s *QuestionServer) AddAnswer(ctx context.Context, in *pb.AddAnswerReq) (*pb.AddAnswerResp, error) {
	l := logic.NewAddAnswerLogic(ctx, s.svcCtx)
	return l.AddAnswer(in)
}

func (s *QuestionServer) UpdateAnswer(ctx context.Context, in *pb.UpdateAnswerReq) (*pb.UpdateAnswerResp, error) {
	l := logic.NewUpdateAnswerLogic(ctx, s.svcCtx)
	return l.UpdateAnswer(in)
}

func (s *QuestionServer) DelAnswer(ctx context.Context, in *pb.DelAnswerReq) (*pb.DelAnswerResp, error) {
	l := logic.NewDelAnswerLogic(ctx, s.svcCtx)
	return l.DelAnswer(in)
}

func (s *QuestionServer) GetAnswerById(ctx context.Context, in *pb.GetAnswerByIdReq) (*pb.GetAnswerByIdResp, error) {
	l := logic.NewGetAnswerByIdLogic(ctx, s.svcCtx)
	return l.GetAnswerById(in)
}

func (s *QuestionServer) SearchAnswer(ctx context.Context, in *pb.SearchAnswerReq) (*pb.SearchAnswerResp, error) {
	l := logic.NewSearchAnswerLogic(ctx, s.svcCtx)
	return l.SearchAnswer(in)
}

func (s *QuestionServer) AddQuestion(ctx context.Context, in *pb.AddQuestionReq) (*pb.AddQuestionResp, error) {
	l := logic.NewAddQuestionLogic(ctx, s.svcCtx)
	return l.AddQuestion(in)
}

func (s *QuestionServer) UpdateQuestion(ctx context.Context, in *pb.UpdateQuestionReq) (*pb.UpdateQuestionResp, error) {
	l := logic.NewUpdateQuestionLogic(ctx, s.svcCtx)
	return l.UpdateQuestion(in)
}

func (s *QuestionServer) DelQuestion(ctx context.Context, in *pb.DelQuestionReq) (*pb.DelQuestionResp, error) {
	l := logic.NewDelQuestionLogic(ctx, s.svcCtx)
	return l.DelQuestion(in)
}

func (s *QuestionServer) GetQuestionById(ctx context.Context, in *pb.GetQuestionByIdReq) (*pb.GetQuestionByIdResp, error) {
	l := logic.NewGetQuestionByIdLogic(ctx, s.svcCtx)
	return l.GetQuestionById(in)
}

func (s *QuestionServer) SearchQuestion(ctx context.Context, in *pb.SearchQuestionReq) (*pb.SearchQuestionResp, error) {
	l := logic.NewSearchQuestionLogic(ctx, s.svcCtx)
	return l.SearchQuestion(in)
}
